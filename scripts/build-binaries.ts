#!/usr/bin/env bun
import { mkdir } from "node:fs/promises";
import { join } from "node:path";
import { $ } from "bun";

// Read version from CLI wrapper package (matches platform packages)
const cliPkg = await Bun.file("./packages/cli/package.json").json();
const VERSION = cliPkg.version;

const ALL_PLATFORMS = [
  {
    target: "bun-linux-x64",
    name: "linux-x64",
    os: "linux",
    cpu: "x64",
    ext: "",
  },
  {
    target: "bun-darwin-arm64",
    name: "darwin-arm64",
    os: "darwin",
    cpu: "arm64",
    ext: "",
  },
];

// Detect current platform
const currentPlatform = `${process.platform}-${process.arch}`;
const buildAll = process.argv.includes("--all");

// Filter platforms - only current platform unless --all is specified
const PLATFORMS = buildAll
  ? ALL_PLATFORMS
  : ALL_PLATFORMS.filter((p) => `${p.os}-${p.cpu}` === currentPlatform);

if (PLATFORMS.length === 0) {
  console.error(`❌ Unsupported platform: ${currentPlatform}`);
  process.exit(1);
}

console.log(
  `Building binaries v${VERSION} for ${PLATFORMS.length} platform${PLATFORMS.length > 1 ? "s" : ""}...\n`,
);

// Generate version file for binary
const versionFilePath = "./packages/mcp-gateway/src/version.ts";
await Bun.write(
  versionFilePath,
  `// Auto-generated by build-binaries.ts - do not edit
export const VERSION = "${VERSION}";
`,
);

for (const platform of PLATFORMS) {
  console.log(`📦 Building for ${platform.name}...`);

  const pkgDir = `./packages/mcp-gateway-${platform.name}`;
  await mkdir(pkgDir, { recursive: true });

  // Create .gitignore for binary
  const gitignoreContent = `# Binary file (generated by build-binaries script)
mcp-gateway
mcp-gateway.exe
`;
  await Bun.write(join(pkgDir, ".gitignore"), gitignoreContent);

  // Compile binary
  // Note: All dependencies are bundled into the binary
  // Define VERSION constant at compile time (needs to be a string literal)
  await $`bun build --compile \
    --target=${platform.target} \
    --minify \
    --define BUILD_VERSION='"${VERSION}"' \
    ./packages/mcp-gateway/src/binary-entry.ts \
    --outfile ${pkgDir}/mcp-gateway${platform.ext}`;

  // Make executable
  if (platform.ext === "") {
    await $`chmod +x ${pkgDir}/mcp-gateway`;
  }

  // Create package.json
  const pkgJson = {
    name: `@fiberplane/mcp-gateway-${platform.name}`,
    version: VERSION,
    description: `MCP Gateway binary for ${platform.os}-${platform.cpu}`,
    os: [platform.os],
    cpu: [platform.cpu],
    files: [`mcp-gateway${platform.ext}`],
    publishConfig: {
      access: "public",
    },
  };

  await Bun.write(
    join(pkgDir, "package.json"),
    JSON.stringify(pkgJson, null, 2),
  );

  console.log(`✓ Built ${platform.name}\n`);
}

console.log("✅ All binaries built successfully!");
